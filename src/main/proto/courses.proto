package com.watcourses.wat_courses.proto;

enum Term {
  SPRING = 0;
  WINTER = 1;
  FALL = 2;
}

message RuleInfo {
  optional string rawString = 1;
  optional string logicString = 2;
  optional bool fullyResolved = 3;
  optional string json = 4;
}

message CourseInfo {
  optional string name = 1;
  optional string code = 2;
  optional string description = 3;
  optional string faculty = 4;
  repeated Term offeringTerms = 5;
  optional string id = 6;
  optional RuleInfo preRequisite = 7;
  optional RuleInfo coRequisite = 8;
  optional RuleInfo antiRequisite = 9;
  optional double liked = 10;
  optional double useful = 11;
  optional double easy = 12;
  optional int32 commentsCount = 13;
  optional int32 ratingsCount = 14;
}

message CourseList {
  optional string name = 1;
  repeated string courses = 2;
}

message PaginationInfoRequest {
  optional int32 zeroBasedPage = 1;
  optional int32 limit = 2;
}

message PaginationInfoResponse {
  optional int32 totalPages = 1;
  optional int32 currentPage = 2;
  optional int32 limit = 3;
  optional int32 totalResults = 4;
}

message Sort {
  enum SortBy {
    TITLE = 1;
    CODE = 2;
  }
  enum Order {
    ASC = 1;
    DESC = 2;
  }
  optional SortBy sortBy = 1;
  optional Order order = 2;
}

message SearchCourseRequest {
  optional PaginationInfoRequest pagination = 1;
  optional bool basicInfoOnly = 2; // if true, do not return requisite info
  optional string searchQuery = 3;
  optional Sort sort = 4;
}

message SearchCourseResponse {
  optional PaginationInfoResponse pagination = 1;
  repeated CourseInfo results = 2;
}

enum ConditionType {
  TRUE = 0;
  FALSE = 1;
  AND = 2;
  OR = 3;
  NOT = 4;
  HAS_COURSE = 5;
  HAS_LABEL = 6;
  SATISFIES_LIST = 7;
}

enum CoopStream {
  NO_COOP = 0;
  STREAM_4 = 1;
  STREAM_8 = 2;
}

message Schedule {
  message TermSchedule {
    repeated string courseCodes = 1;
    optional string termName = 2; // e.g. 1A, 2B
    optional int32 year = 3; // e.g. 2020
    optional Term term = 4; // e.g. Spring
  }
  repeated TermSchedule terms = 1;
}

message StudentProfile {
  optional Schedule schedule = 1;
  repeated string labels = 2;
  repeated string degrees = 3;
  repeated string shortList = 4;
}

message CreateStudentProfileRequest {
  repeated string degrees = 1;
  optional int32 startingYear = 2;
  optional CoopStream coopStream = 3; // not used for now.
  optional Schedule schedule = 4;
}

message CheckResults {
  message Issue {
    enum Type {
      PRE_REQUISITE_NOT_MET = 1;
      CO_REQUISITE_NOT_MET = 2;
      ANTI_REQUISITE_NOT_MET = 3;
      DEGREE_REQUIREMENTS_NOT_MET = 4;
    }
    optional Type type = 1;
    optional string subjectName = 2; // Either the code of the course or the name of the cond
    optional string relatedCond = 3; // Condition that failed in the check (string, logical expression).
    optional string relatedCondRaw = 4; // The raw condition, if applicable
    repeated string relatedCourse = 5; // courses in the cond.
    repeated string relatedCourseList = 6; // course list in the cond.
  }
  repeated Issue issues = 1;
  repeated CourseInfo checkedCourses = 2;
}

message FindSlotRequest{
  optional StudentProfile profile = 1;
  optional string courseCode = 2;
}

message FindSlotResponse {
  map<string, CheckResults> slot = 1; // The term name and check results of the corresponding slot
}

message BatchGetCourseRequest {
  repeated string courseCodes = 1;
}

message BatchGetCourseResponse {
  repeated CourseInfo results = 1;
}

message EventRequest {
  optional string type = 1;
  optional string subject = 2;
  optional string data = 3;
}
