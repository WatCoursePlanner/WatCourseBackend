// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: courses.proto
package com.watcourses.wat_courses.proto

import com.squareup.wire.EnumAdapter
import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.WireEnum
import com.squareup.wire.WireField
import com.squareup.wire.internal.redactElements
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import kotlin.jvm.JvmStatic
import okio.ByteString

class CheckResults(
  @field:WireField(
    tag = 1,
    adapter = "com.watcourses.wat_courses.proto.CheckResults${'$'}Issue#ADAPTER",
    label = WireField.Label.REPEATED
  )
  val issues: List<Issue> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY
) : Message<CheckResults, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CheckResults) return false
    return unknownFields == other.unknownFields
        && issues == other.issues
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + issues.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (issues.isNotEmpty()) result += """issues=$issues"""
    return result.joinToString(prefix = "CheckResults{", separator = ", ", postfix = "}")
  }

  fun copy(issues: List<Issue> = this.issues, unknownFields: ByteString = this.unknownFields):
      CheckResults = CheckResults(issues, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<CheckResults> = object : ProtoAdapter<CheckResults>(
      FieldEncoding.LENGTH_DELIMITED, 
      CheckResults::class, 
      "type.googleapis.com/com.watcourses.wat_courses.proto.CheckResults"
    ) {
      override fun encodedSize(value: CheckResults): Int = 
        Issue.ADAPTER.asRepeated().encodedSizeWithTag(1, value.issues) +
        value.unknownFields.size

      override fun encode(writer: ProtoWriter, value: CheckResults) {
        Issue.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.issues)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): CheckResults {
        val issues = mutableListOf<Issue>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> issues.add(Issue.ADAPTER.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return CheckResults(
          issues = issues,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: CheckResults): CheckResults = value.copy(
        issues = value.issues.redactElements(Issue.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }
  }

  class Issue(
    @field:WireField(
      tag = 1,
      adapter = "com.watcourses.wat_courses.proto.CheckResults${'$'}Issue${'$'}Type#ADAPTER"
    )
    val type: Type? = null,
    /**
     * Either the code of the course or the name of the cond
     */
    @field:WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    val subjectName: String? = null,
    /**
     * Condition that failed in the check (string, logical expression).
     */
    @field:WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    val relatedCond: String? = null,
    /**
     * The raw condition, if applicable
     */
    @field:WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
    )
    val relatedCondRaw: String? = null,
    /**
     * courses in the cond.
     */
    @field:WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
    )
    val relatedCourse: List<String> = emptyList(),
    /**
     * course list in the cond.
     */
    @field:WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
    )
    val relatedCourseList: List<String> = emptyList(),
    unknownFields: ByteString = ByteString.EMPTY
  ) : Message<Issue, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Nothing = throw AssertionError()

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is Issue) return false
      return unknownFields == other.unknownFields
          && type == other.type
          && subjectName == other.subjectName
          && relatedCond == other.relatedCond
          && relatedCondRaw == other.relatedCondRaw
          && relatedCourse == other.relatedCourse
          && relatedCourseList == other.relatedCourseList
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + type.hashCode()
        result = result * 37 + subjectName.hashCode()
        result = result * 37 + relatedCond.hashCode()
        result = result * 37 + relatedCondRaw.hashCode()
        result = result * 37 + relatedCourse.hashCode()
        result = result * 37 + relatedCourseList.hashCode()
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (type != null) result += """type=$type"""
      if (subjectName != null) result += """subjectName=${sanitize(subjectName)}"""
      if (relatedCond != null) result += """relatedCond=${sanitize(relatedCond)}"""
      if (relatedCondRaw != null) result += """relatedCondRaw=${sanitize(relatedCondRaw)}"""
      if (relatedCourse.isNotEmpty()) result += """relatedCourse=${sanitize(relatedCourse)}"""
      if (relatedCourseList.isNotEmpty()) result +=
          """relatedCourseList=${sanitize(relatedCourseList)}"""
      return result.joinToString(prefix = "Issue{", separator = ", ", postfix = "}")
    }

    fun copy(
      type: Type? = this.type,
      subjectName: String? = this.subjectName,
      relatedCond: String? = this.relatedCond,
      relatedCondRaw: String? = this.relatedCondRaw,
      relatedCourse: List<String> = this.relatedCourse,
      relatedCourseList: List<String> = this.relatedCourseList,
      unknownFields: ByteString = this.unknownFields
    ): Issue = Issue(type, subjectName, relatedCond, relatedCondRaw, relatedCourse,
        relatedCourseList, unknownFields)

    companion object {
      @JvmField
      val ADAPTER: ProtoAdapter<Issue> = object : ProtoAdapter<Issue>(
        FieldEncoding.LENGTH_DELIMITED, 
        Issue::class, 
        "type.googleapis.com/com.watcourses.wat_courses.proto.CheckResults.Issue"
      ) {
        override fun encodedSize(value: Issue): Int = 
          Type.ADAPTER.encodedSizeWithTag(1, value.type) +
          ProtoAdapter.STRING.encodedSizeWithTag(2, value.subjectName) +
          ProtoAdapter.STRING.encodedSizeWithTag(3, value.relatedCond) +
          ProtoAdapter.STRING.encodedSizeWithTag(4, value.relatedCondRaw) +
          ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(5, value.relatedCourse) +
          ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(6, value.relatedCourseList) +
          value.unknownFields.size

        override fun encode(writer: ProtoWriter, value: Issue) {
          Type.ADAPTER.encodeWithTag(writer, 1, value.type)
          ProtoAdapter.STRING.encodeWithTag(writer, 2, value.subjectName)
          ProtoAdapter.STRING.encodeWithTag(writer, 3, value.relatedCond)
          ProtoAdapter.STRING.encodeWithTag(writer, 4, value.relatedCondRaw)
          ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 5, value.relatedCourse)
          ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 6, value.relatedCourseList)
          writer.writeBytes(value.unknownFields)
        }

        override fun decode(reader: ProtoReader): Issue {
          var type: Type? = null
          var subjectName: String? = null
          var relatedCond: String? = null
          var relatedCondRaw: String? = null
          val relatedCourse = mutableListOf<String>()
          val relatedCourseList = mutableListOf<String>()
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> try {
                type = Type.ADAPTER.decode(reader)
              } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
                reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
              }
              2 -> subjectName = ProtoAdapter.STRING.decode(reader)
              3 -> relatedCond = ProtoAdapter.STRING.decode(reader)
              4 -> relatedCondRaw = ProtoAdapter.STRING.decode(reader)
              5 -> relatedCourse.add(ProtoAdapter.STRING.decode(reader))
              6 -> relatedCourseList.add(ProtoAdapter.STRING.decode(reader))
              else -> reader.readUnknownField(tag)
            }
          }
          return Issue(
            type = type,
            subjectName = subjectName,
            relatedCond = relatedCond,
            relatedCondRaw = relatedCondRaw,
            relatedCourse = relatedCourse,
            relatedCourseList = relatedCourseList,
            unknownFields = unknownFields
          )
        }

        override fun redact(value: Issue): Issue = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }
    }

    enum class Type(
      override val value: Int
    ) : WireEnum {
      PRE_REQUISITE_NOT_MET(1),

      CO_REQUISITE_NOT_MET(2),

      ANTI_REQUISITE_NOT_MET(3),

      DEGREE_REQUIREMENTS_NOT_MET(4);

      companion object {
        @JvmField
        val ADAPTER: ProtoAdapter<Type> = object : EnumAdapter<Type>(
          Type::class
        ) {
          override fun fromValue(value: Int): Type? = Type.fromValue(value)
        }

        @JvmStatic
        fun fromValue(value: Int): Type? = when (value) {
          1 -> PRE_REQUISITE_NOT_MET
          2 -> CO_REQUISITE_NOT_MET
          3 -> ANTI_REQUISITE_NOT_MET
          4 -> DEGREE_REQUIREMENTS_NOT_MET
          else -> null
        }
      }
    }
  }
}
