// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: courses.proto
package com.watcourses.wat_courses.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Nothing
import kotlin.String
import kotlin.collections.List
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class CourseInfo(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val name: String? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val code: String? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val description: String? = null,
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val faculty: String? = null,
  @field:WireField(
    tag = 5,
    adapter = "com.watcourses.wat_courses.proto.Term#ADAPTER",
    label = WireField.Label.REPEATED
  )
  val offeringTerms: List<Term> = emptyList(),
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val id: String? = null,
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val preRequisiteLogicStr: String? = null,
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val coRequisiteLogicStr: String? = null,
  @field:WireField(
    tag = 9,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val antiRequisiteLogicStr: String? = null,
  @field:WireField(
    tag = 10,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val preRequisite: String? = null,
  @field:WireField(
    tag = 11,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val coRequisite: String? = null,
  @field:WireField(
    tag = 12,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val antiRequisite: String? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<CourseInfo, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is CourseInfo) return false
    return unknownFields == other.unknownFields
        && name == other.name
        && code == other.code
        && description == other.description
        && faculty == other.faculty
        && offeringTerms == other.offeringTerms
        && id == other.id
        && preRequisiteLogicStr == other.preRequisiteLogicStr
        && coRequisiteLogicStr == other.coRequisiteLogicStr
        && antiRequisiteLogicStr == other.antiRequisiteLogicStr
        && preRequisite == other.preRequisite
        && coRequisite == other.coRequisite
        && antiRequisite == other.antiRequisite
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + name.hashCode()
      result = result * 37 + code.hashCode()
      result = result * 37 + description.hashCode()
      result = result * 37 + faculty.hashCode()
      result = result * 37 + offeringTerms.hashCode()
      result = result * 37 + id.hashCode()
      result = result * 37 + preRequisiteLogicStr.hashCode()
      result = result * 37 + coRequisiteLogicStr.hashCode()
      result = result * 37 + antiRequisiteLogicStr.hashCode()
      result = result * 37 + preRequisite.hashCode()
      result = result * 37 + coRequisite.hashCode()
      result = result * 37 + antiRequisite.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (name != null) result += """name=${sanitize(name)}"""
    if (code != null) result += """code=${sanitize(code)}"""
    if (description != null) result += """description=${sanitize(description)}"""
    if (faculty != null) result += """faculty=${sanitize(faculty)}"""
    if (offeringTerms.isNotEmpty()) result += """offeringTerms=$offeringTerms"""
    if (id != null) result += """id=${sanitize(id)}"""
    if (preRequisiteLogicStr != null) result +=
        """preRequisiteLogicStr=${sanitize(preRequisiteLogicStr)}"""
    if (coRequisiteLogicStr != null) result +=
        """coRequisiteLogicStr=${sanitize(coRequisiteLogicStr)}"""
    if (antiRequisiteLogicStr != null) result +=
        """antiRequisiteLogicStr=${sanitize(antiRequisiteLogicStr)}"""
    if (preRequisite != null) result += """preRequisite=${sanitize(preRequisite)}"""
    if (coRequisite != null) result += """coRequisite=${sanitize(coRequisite)}"""
    if (antiRequisite != null) result += """antiRequisite=${sanitize(antiRequisite)}"""
    return result.joinToString(prefix = "CourseInfo{", separator = ", ", postfix = "}")
  }

  fun copy(
    name: String? = this.name,
    code: String? = this.code,
    description: String? = this.description,
    faculty: String? = this.faculty,
    offeringTerms: List<Term> = this.offeringTerms,
    id: String? = this.id,
    preRequisiteLogicStr: String? = this.preRequisiteLogicStr,
    coRequisiteLogicStr: String? = this.coRequisiteLogicStr,
    antiRequisiteLogicStr: String? = this.antiRequisiteLogicStr,
    preRequisite: String? = this.preRequisite,
    coRequisite: String? = this.coRequisite,
    antiRequisite: String? = this.antiRequisite,
    unknownFields: ByteString = this.unknownFields
  ): CourseInfo = CourseInfo(name, code, description, faculty, offeringTerms, id,
      preRequisiteLogicStr, coRequisiteLogicStr, antiRequisiteLogicStr, preRequisite, coRequisite,
      antiRequisite, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<CourseInfo> = object : ProtoAdapter<CourseInfo>(
      FieldEncoding.LENGTH_DELIMITED, 
      CourseInfo::class, 
      "type.googleapis.com/com.watcourses.wat_courses.proto.CourseInfo"
    ) {
      override fun encodedSize(value: CourseInfo): Int = 
        ProtoAdapter.STRING.encodedSizeWithTag(1, value.name) +
        ProtoAdapter.STRING.encodedSizeWithTag(2, value.code) +
        ProtoAdapter.STRING.encodedSizeWithTag(3, value.description) +
        ProtoAdapter.STRING.encodedSizeWithTag(4, value.faculty) +
        Term.ADAPTER.asRepeated().encodedSizeWithTag(5, value.offeringTerms) +
        ProtoAdapter.STRING.encodedSizeWithTag(6, value.id) +
        ProtoAdapter.STRING.encodedSizeWithTag(7, value.preRequisiteLogicStr) +
        ProtoAdapter.STRING.encodedSizeWithTag(8, value.coRequisiteLogicStr) +
        ProtoAdapter.STRING.encodedSizeWithTag(9, value.antiRequisiteLogicStr) +
        ProtoAdapter.STRING.encodedSizeWithTag(10, value.preRequisite) +
        ProtoAdapter.STRING.encodedSizeWithTag(11, value.coRequisite) +
        ProtoAdapter.STRING.encodedSizeWithTag(12, value.antiRequisite) +
        value.unknownFields.size

      override fun encode(writer: ProtoWriter, value: CourseInfo) {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.code)
        ProtoAdapter.STRING.encodeWithTag(writer, 3, value.description)
        ProtoAdapter.STRING.encodeWithTag(writer, 4, value.faculty)
        Term.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.offeringTerms)
        ProtoAdapter.STRING.encodeWithTag(writer, 6, value.id)
        ProtoAdapter.STRING.encodeWithTag(writer, 7, value.preRequisiteLogicStr)
        ProtoAdapter.STRING.encodeWithTag(writer, 8, value.coRequisiteLogicStr)
        ProtoAdapter.STRING.encodeWithTag(writer, 9, value.antiRequisiteLogicStr)
        ProtoAdapter.STRING.encodeWithTag(writer, 10, value.preRequisite)
        ProtoAdapter.STRING.encodeWithTag(writer, 11, value.coRequisite)
        ProtoAdapter.STRING.encodeWithTag(writer, 12, value.antiRequisite)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): CourseInfo {
        var name: String? = null
        var code: String? = null
        var description: String? = null
        var faculty: String? = null
        val offeringTerms = mutableListOf<Term>()
        var id: String? = null
        var preRequisiteLogicStr: String? = null
        var coRequisiteLogicStr: String? = null
        var antiRequisiteLogicStr: String? = null
        var preRequisite: String? = null
        var coRequisite: String? = null
        var antiRequisite: String? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> name = ProtoAdapter.STRING.decode(reader)
            2 -> code = ProtoAdapter.STRING.decode(reader)
            3 -> description = ProtoAdapter.STRING.decode(reader)
            4 -> faculty = ProtoAdapter.STRING.decode(reader)
            5 -> try {
              offeringTerms.add(Term.ADAPTER.decode(reader))
            } catch (e: ProtoAdapter.EnumConstantNotFoundException) {
              reader.addUnknownField(tag, FieldEncoding.VARINT, e.value.toLong())
            }
            6 -> id = ProtoAdapter.STRING.decode(reader)
            7 -> preRequisiteLogicStr = ProtoAdapter.STRING.decode(reader)
            8 -> coRequisiteLogicStr = ProtoAdapter.STRING.decode(reader)
            9 -> antiRequisiteLogicStr = ProtoAdapter.STRING.decode(reader)
            10 -> preRequisite = ProtoAdapter.STRING.decode(reader)
            11 -> coRequisite = ProtoAdapter.STRING.decode(reader)
            12 -> antiRequisite = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return CourseInfo(
          name = name,
          code = code,
          description = description,
          faculty = faculty,
          offeringTerms = offeringTerms,
          id = id,
          preRequisiteLogicStr = preRequisiteLogicStr,
          coRequisiteLogicStr = coRequisiteLogicStr,
          antiRequisiteLogicStr = antiRequisiteLogicStr,
          preRequisite = preRequisite,
          coRequisite = coRequisite,
          antiRequisite = antiRequisite,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: CourseInfo): CourseInfo = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }
  }
}
