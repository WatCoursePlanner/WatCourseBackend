// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: user.proto
package com.watcourses.wat_courses.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class LoginOrRegisterResponse(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  val success: Boolean? = null,
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val reason: String? = null,
  @field:WireField(
    tag = 3,
    adapter = "com.watcourses.wat_courses.proto.UserInfo#ADAPTER"
  )
  val userInfo: UserInfo? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<LoginOrRegisterResponse, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is LoginOrRegisterResponse) return false
    return unknownFields == other.unknownFields
        && success == other.success
        && reason == other.reason
        && userInfo == other.userInfo
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + success.hashCode()
      result = result * 37 + reason.hashCode()
      result = result * 37 + userInfo.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (success != null) result += """success=$success"""
    if (reason != null) result += """reason=${sanitize(reason)}"""
    if (userInfo != null) result += """userInfo=$userInfo"""
    return result.joinToString(prefix = "LoginOrRegisterResponse{", separator = ", ", postfix = "}")
  }

  fun copy(
    success: Boolean? = this.success,
    reason: String? = this.reason,
    userInfo: UserInfo? = this.userInfo,
    unknownFields: ByteString = this.unknownFields
  ): LoginOrRegisterResponse = LoginOrRegisterResponse(success, reason, userInfo, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<LoginOrRegisterResponse> = object :
        ProtoAdapter<LoginOrRegisterResponse>(
      FieldEncoding.LENGTH_DELIMITED, 
      LoginOrRegisterResponse::class, 
      "type.googleapis.com/com.watcourses.wat_courses.proto.LoginOrRegisterResponse"
    ) {
      override fun encodedSize(value: LoginOrRegisterResponse): Int = 
        ProtoAdapter.BOOL.encodedSizeWithTag(1, value.success) +
        ProtoAdapter.STRING.encodedSizeWithTag(2, value.reason) +
        UserInfo.ADAPTER.encodedSizeWithTag(3, value.userInfo) +
        value.unknownFields.size

      override fun encode(writer: ProtoWriter, value: LoginOrRegisterResponse) {
        ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.success)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.reason)
        UserInfo.ADAPTER.encodeWithTag(writer, 3, value.userInfo)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): LoginOrRegisterResponse {
        var success: Boolean? = null
        var reason: String? = null
        var userInfo: UserInfo? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> success = ProtoAdapter.BOOL.decode(reader)
            2 -> reason = ProtoAdapter.STRING.decode(reader)
            3 -> userInfo = UserInfo.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return LoginOrRegisterResponse(
          success = success,
          reason = reason,
          userInfo = userInfo,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: LoginOrRegisterResponse): LoginOrRegisterResponse = value.copy(
        userInfo = value.userInfo?.let(UserInfo.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }
  }
}
