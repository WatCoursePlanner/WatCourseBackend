// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: uwapi.proto
package com.watcourses.wat_courses.proto

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.WireField
import com.squareup.wire.internal.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Nothing
import kotlin.String
import kotlin.hashCode
import kotlin.jvm.JvmField
import okio.ByteString

class ClassDate(
  /**
   * 24 hour class starting time
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val startTime: String? = null,
  /**
   * 24 hour class ending time
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val endTime: String? = null,
  /**
   * Weekdays the course is offered
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val weekdays: String? = null,
  /**
   * Additional starting date for course
   */
  @field:WireField(
    tag = 4,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val startDate: String? = null,
  /**
   * Additional ending date for course
   */
  @field:WireField(
    tag = 5,
    adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  val endDate: String? = null,
  /**
   * If the course schedule is TBA
   */
  @field:WireField(
    tag = 6,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  val isTba: Boolean? = null,
  /**
   * If the course is cancelled for the term
   */
  @field:WireField(
    tag = 7,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  val isCancelled: Boolean? = null,
  /**
   * If the course is closed for the term
   */
  @field:WireField(
    tag = 8,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  val isClosed: Boolean? = null,
  unknownFields: ByteString = ByteString.EMPTY
) : Message<ClassDate, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  override fun newBuilder(): Nothing = throw AssertionError()

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is ClassDate) return false
    return unknownFields == other.unknownFields
        && startTime == other.startTime
        && endTime == other.endTime
        && weekdays == other.weekdays
        && startDate == other.startDate
        && endDate == other.endDate
        && isTba == other.isTba
        && isCancelled == other.isCancelled
        && isClosed == other.isClosed
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + startTime.hashCode()
      result = result * 37 + endTime.hashCode()
      result = result * 37 + weekdays.hashCode()
      result = result * 37 + startDate.hashCode()
      result = result * 37 + endDate.hashCode()
      result = result * 37 + isTba.hashCode()
      result = result * 37 + isCancelled.hashCode()
      result = result * 37 + isClosed.hashCode()
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (startTime != null) result += """startTime=${sanitize(startTime)}"""
    if (endTime != null) result += """endTime=${sanitize(endTime)}"""
    if (weekdays != null) result += """weekdays=${sanitize(weekdays)}"""
    if (startDate != null) result += """startDate=${sanitize(startDate)}"""
    if (endDate != null) result += """endDate=${sanitize(endDate)}"""
    if (isTba != null) result += """isTba=$isTba"""
    if (isCancelled != null) result += """isCancelled=$isCancelled"""
    if (isClosed != null) result += """isClosed=$isClosed"""
    return result.joinToString(prefix = "ClassDate{", separator = ", ", postfix = "}")
  }

  fun copy(
    startTime: String? = this.startTime,
    endTime: String? = this.endTime,
    weekdays: String? = this.weekdays,
    startDate: String? = this.startDate,
    endDate: String? = this.endDate,
    isTba: Boolean? = this.isTba,
    isCancelled: Boolean? = this.isCancelled,
    isClosed: Boolean? = this.isClosed,
    unknownFields: ByteString = this.unknownFields
  ): ClassDate = ClassDate(startTime, endTime, weekdays, startDate, endDate, isTba, isCancelled,
      isClosed, unknownFields)

  companion object {
    @JvmField
    val ADAPTER: ProtoAdapter<ClassDate> = object : ProtoAdapter<ClassDate>(
      FieldEncoding.LENGTH_DELIMITED, 
      ClassDate::class, 
      "type.googleapis.com/com.watcourses.wat_courses.proto.ClassDate"
    ) {
      override fun encodedSize(value: ClassDate): Int = 
        ProtoAdapter.STRING.encodedSizeWithTag(1, value.startTime) +
        ProtoAdapter.STRING.encodedSizeWithTag(2, value.endTime) +
        ProtoAdapter.STRING.encodedSizeWithTag(3, value.weekdays) +
        ProtoAdapter.STRING.encodedSizeWithTag(4, value.startDate) +
        ProtoAdapter.STRING.encodedSizeWithTag(5, value.endDate) +
        ProtoAdapter.BOOL.encodedSizeWithTag(6, value.isTba) +
        ProtoAdapter.BOOL.encodedSizeWithTag(7, value.isCancelled) +
        ProtoAdapter.BOOL.encodedSizeWithTag(8, value.isClosed) +
        value.unknownFields.size

      override fun encode(writer: ProtoWriter, value: ClassDate) {
        ProtoAdapter.STRING.encodeWithTag(writer, 1, value.startTime)
        ProtoAdapter.STRING.encodeWithTag(writer, 2, value.endTime)
        ProtoAdapter.STRING.encodeWithTag(writer, 3, value.weekdays)
        ProtoAdapter.STRING.encodeWithTag(writer, 4, value.startDate)
        ProtoAdapter.STRING.encodeWithTag(writer, 5, value.endDate)
        ProtoAdapter.BOOL.encodeWithTag(writer, 6, value.isTba)
        ProtoAdapter.BOOL.encodeWithTag(writer, 7, value.isCancelled)
        ProtoAdapter.BOOL.encodeWithTag(writer, 8, value.isClosed)
        writer.writeBytes(value.unknownFields)
      }

      override fun decode(reader: ProtoReader): ClassDate {
        var startTime: String? = null
        var endTime: String? = null
        var weekdays: String? = null
        var startDate: String? = null
        var endDate: String? = null
        var isTba: Boolean? = null
        var isCancelled: Boolean? = null
        var isClosed: Boolean? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> startTime = ProtoAdapter.STRING.decode(reader)
            2 -> endTime = ProtoAdapter.STRING.decode(reader)
            3 -> weekdays = ProtoAdapter.STRING.decode(reader)
            4 -> startDate = ProtoAdapter.STRING.decode(reader)
            5 -> endDate = ProtoAdapter.STRING.decode(reader)
            6 -> isTba = ProtoAdapter.BOOL.decode(reader)
            7 -> isCancelled = ProtoAdapter.BOOL.decode(reader)
            8 -> isClosed = ProtoAdapter.BOOL.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return ClassDate(
          startTime = startTime,
          endTime = endTime,
          weekdays = weekdays,
          startDate = startDate,
          endDate = endDate,
          isTba = isTba,
          isCancelled = isCancelled,
          isClosed = isClosed,
          unknownFields = unknownFields
        )
      }

      override fun redact(value: ClassDate): ClassDate = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }
  }
}
